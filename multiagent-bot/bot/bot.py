import asyncio
import json
import os
from pathlib import Path
from datetime import datetime, timedelta

from telegram import Update, Message, File
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# –ü–∞–ø–∫–∏
BASE_DIR = Path(__file__).parent
UPLOAD_DIR = BASE_DIR / "uploads"
DATA_DIR = BASE_DIR / "data"
DATA_DIR.mkdir(exist_ok=True)
UPLOAD_DIR.mkdir(exist_ok=True)

# –ü–∞–º—è—Ç—å: "–∂–¥—ë–º –æ–ø–∏—Å–∞–Ω–∏–µ" –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# user_id -> {"expires": datetime, "record": {–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∑ description}}
PENDING_DESC = {}

DESC_TIMEOUT = timedelta(minutes=5)  # —Å–∫–æ–ª—å–∫–æ –∂–¥—ë–º —Ç–µ–∫—Å—Ç-–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ñ–∞–π–ª–∞

def write_jsonl(record: dict, path: Path = DATA_DIR / "uploads.jsonl"):
    with path.open("a", encoding="utf-8") as f:
        f.write(json.dumps(record, ensure_ascii=False) + "\n")

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏—Å—ã–ª–∞–π —Ñ–∞–π–ª. –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª—É "
        "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ñ–∞–π–ª–∞ (–≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)."
    )

def ensure_user_dir(user_id: int) -> Path:
    p = UPLOAD_DIR / str(user_id)
    p.mkdir(parents=True, exist_ok=True)
    return p

def sniff_file_kind(msg: Message) -> str:
    if msg.document: return "document"
    if msg.photo:    return "photo"
    if msg.video:    return "video"
    if msg.audio:    return "audio"
    if msg.voice:    return "voice"
    return "unknown"

async def download_any_file(msg: Message) -> tuple[Path, dict]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Message –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ_–±–µ–∑_description).
    """
    user = msg.from_user
    user_dir = ensure_user_dir(user.id)

    file_obj: File | None = None
    filename = None
    kind = sniff_file_kind(msg)

    if msg.document:
        file_obj = await msg.document.get_file()
        filename = msg.document.file_name or f"document_{msg.document.file_unique_id}"
    elif msg.photo:
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –±–æ–ª—å—à—É—é) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        file_obj = await msg.photo[-1].get_file()
        filename = f"photo_{msg.photo[-1].file_unique_id}.jpg"
    elif msg.video:
        file_obj = await msg.video.get_file()
        filename = msg.video.file_name or f"video_{msg.video.file_unique_id}.mp4"
    elif msg.audio:
        file_obj = await msg.audio.get_file()
        filename = msg.audio.file_name or f"audio_{msg.audio.file_unique_id}.mp3"
    elif msg.voice:
        file_obj = await msg.voice.get_file()
        filename = f"voice_{msg.voice.file_unique_id}.ogg"
    else:
        raise RuntimeError("Unsupported message type")

    # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è
    stamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    safe_name = f"{stamp}_{filename}"
    dst = user_dir / safe_name
    await file_obj.download_to_drive(dst)

    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    record = {
        "user_id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "kind": kind,
        "file_id": file_obj.file_id,
        "file_unique_id": getattr(getattr(msg, kind, None), "file_unique_id", None) if kind != "photo" else msg.photo[-1].file_unique_id,
        "original_filename": filename,
        "saved_path": str(dst.relative_to(BASE_DIR)),
        "message_id": msg.message_id,
        "chat_id": msg.chat_id,
        "media_group_id": msg.media_group_id,  # –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è, –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –∞–ª—å–±–æ–º
        "caption": msg.caption,
        "created_utc": datetime.utcnow().isoformat() + "Z",
        "description": None,  # –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –ø—Ä–∏–¥—ë—Ç —Ç–µ–∫—Å—Ç
    }
    return dst, record

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    try:
        _, record = await download_any_file(msg)

        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å caption ‚Äî —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        if record["caption"]:
            record["description"] = record["caption"]
            write_jsonl(record)
            await msg.reply_text("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∑—è—Ç–æ –∏–∑ –ø–æ–¥–ø–∏—Å–∏.")
            return

        # –ò–Ω–∞—á–µ –∂–¥—ë–º —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        PENDING_DESC[msg.from_user.id] = {
            "expires": datetime.utcnow() + DESC_TIMEOUT,
            "record": record,
        }
        await msg.reply_text(
            "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç-–æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 5 –º–∏–Ω—É—Ç)."
        )
    except Exception as e:
        await msg.reply_text(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    uid = msg.from_user.id
    pend = PENDING_DESC.get(uid)

    # –ß–∏—Å—Ç–∏–º –ø—Ä–æ—Ç—É—Ö—à–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    if pend and pend["expires"] < datetime.utcnow():
        PENDING_DESC.pop(uid, None)
        pend = None

    if pend:
        record = pend["record"]
        record["description"] = msg.text
        write_jsonl(record)
        PENDING_DESC.pop(uid, None)
        await msg.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ üìù –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    else:
        await msg.reply_text(
            "–≠—Ç–æ —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª."
        )

async def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start_cmd))

    file_filters = (
        filters.Document.ALL
        | filters.PHOTO
        | filters.VIDEO
        | filters.AUDIO
        | filters.VOICE
    )
    app.add_handler(MessageHandler(file_filters, handle_file))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫
    print("Bot is running...")
    await app.run_polling(close_loop=False)

if __name__ == "__main__":
    asyncio.run(main())